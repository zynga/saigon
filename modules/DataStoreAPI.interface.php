<?php
//
// Copyright (c) 2013, Zynga Inc.
// https://github.com/zynga/saigon
// Author: Matt West (https://github.com/mhwest13)
// License: BSD 2-Clause
//

interface DataStoreAPI {

    public function addAuditUserLog($deployment, $revision, $user);
    public function getAuditLog($deployment);
    public function setAuditLog($deployment, $revision, array $revisionData);
    public function getCommonRepos();
    public function addCommonRepo($deployment);
    public function delCommonRepo($deployment);
    public function getDeploymentRev($deployment);
    public function getDeploymentNextRev($deployment);
    public function getDeploymentPrevRev($deployment);
    public function getDeploymentRevs($deployment);
    public function getDeploymentAllRevs($deployment);
    public function setDeploymentRevs($deployment, $from, $to, $note); 
    public function setDeploymentAllRevs($deployment, $prev, $curr, $next);
    public function deleteDeploymentRev($deployment, $revision);
    public function deleteDeployment($deployment);
    public function incrDeploymentNextRev($deployment);
    public function existsDeploymentRev($deployment, $revision);
    public function createDeployment($deployment, array $deployInfo, array $deployHostSearch, array $deployStaticHosts);
    public function modifyDeployment($deployment, array $deployInfo, array $deployHostSearch, array $deployStaticHosts);
    public function addDeploymentDynamicHost($deployment, $md5Key, array $hostInfo);
    public function delDeploymentDynamicHost($deployment, $md5Key);
    public function addDeploymentStaticHost($deployment, $ip, array $hostInfo);
    public function delDeploymentStaticHost($deployment, $ip);
    public function getDeployments();
    public function existsDeployment($deployment);
    public function getDeploymentInfo($deployment);
    public function getDeploymentCommonRepo($deployment);
    public function getDeploymentHostSearches($deployment);
    public function getDeploymentStaticHosts($deployment);
    public function getDeploymentAuthGroup($deployment);
    public function getDeploymentLdapGroup($deployment);
    public function getDeploymentAliasTemplate($deployment);
    public function getDeploymentGlobalNegate($deployment);
    public function getDeploymentStyle($deployment);
    public function getDeploymentMiscSettings($deployment);
    public function getDeploymentCommands($deployment, $revision);
    public function existsDeploymentCommand($deployment, $revision, $command);
    public function getDeploymentCommand($deployment, $revision, $command);
    public function getDeploymentCommandExec($deployment, $revision, $command);
    public function createDeploymentCommand($deployment, $revision, $command, array $commandInput);
    public function modifyDeploymentCommand($deployment, $revision, $command, array $commandInput);
    public function deleteDeploymentCommand($deployment, $revision, $command);
    public function getDeploymentTimeperiods($deployment, $revision);
    public function existsDeploymentTimeperiod($deployment, $revision, $timePeriod);
    public function existsDeploymentTimeperiodData($deployment, $revision, $timePeriod);
    public function getDeploymentTimeperiod($deployment, $revision, $timePeriod);
    public function getDeploymentTimeperiodInfo($deployment, $revision, $timePeriod);
    public function getDeploymentTimeperiodData($deployment, $revision, $timePeriod);
    public function createDeploymentTimeperiod($deployment, $revision, $timePeriod, array $timePeriodInfo, array $timePeriodData);
    public function modifyDeploymentTimeperiod($deployment, $revision, $timePeriod, array $timePeriodInfo, array $timePeriodData);
    public function deleteDeploymentTimeperiod($deployment, $revision, $timePeriod);
    public function getDeploymentContacts($deployment, $revision);
    public function getDeploymentContact($deployment, $revision, $contact);
    public function existsDeploymentContact($deployment, $revision, $contact);
    public function createDeploymentContact($deployment, $revision, $contact, array $contactInfo);
    public function modifyDeploymentContact($deployment, $revision, $contact, array $contactInfo);
    public function deleteDeploymentContact($deployment, $revision, $contact);
    public function getDeploymentContactGroups($deployment, $revision);
    public function getDeploymentContactGroup($deployment, $revision, $contactGroup);
    public function existsDeploymentContactGroup($deployment, $revision, $contactGroup);
    public function createDeploymentContactGroup($deployment, $revision, $contactGroup, array $contactGroupInfo);
    public function modifyDeploymentContactGroup($deployment, $revision, $contactGroup, array $contactGroupInfo);
    public function deleteDeploymentContactGroup($deployment, $revision, $contactGroup);
    public function getDeploymentContactTemplates($deployment, $revision);
    public function existsDeploymentContactTemplate($deployment, $revision, $contactTemplate);
    public function getDeploymentContactTemplate($deployment, $revision, $contactTemplate);
    public function createDeploymentContactTemplate($deployment, $revision, $contactTemplate, array $contactTemplateInfo);
    public function modifyDeploymentContactTemplate($deployment, $revision, $contactTemplate, array $contactTemplateInfo);
    public function deleteDeploymentContactTemplate($deployment, $revision, $contactTemplate);
    public function getDeploymentHostTemplates($deployment, $revision);
    public function existsDeploymentHostTemplate($deployment, $revision, $hostTemplate);
    public function getDeploymentHostTemplate($deployment, $revision, $hostTemplate);
    public function createDeploymentHostTemplate($deployment, $revision, $hostTemplate, array $hostTemplateInfo);
    public function modifyDeploymentHostTemplate($deployment, $revision, $hostTemplate, array $hostTemplateInfo);
    public function deleteDeploymentHostTemplate($deployment, $revision, $hostTemplate);
    public function getDeploymentHostGroups($deployment, $revision);
    public function existsDeploymentHostGroup($deployment, $revision, $hostGroup);
    public function getDeploymentHostGroup($deployment, $revision, $hostGroup);
    public function createDeploymentHostGroup($deployment, $revision, $hostGroup, array $hostGroupInfo);
    public function modifyDeploymentHostGroup($deployment, $revision, $hostGroup, array $hostGroupInfo);
    public function deleteDeploymentHostGroup($deployment, $revision, $hostGroup);
    public function getDeploymentSvcTemplates($deployment, $revision);
    public function existsDeploymentSvcTemplate($deployment, $revision, $svcTemplate);
    public function getDeploymentSvcTemplate($deployment, $revision, $svcTemplate);
    public function createDeploymentSvcTemplate($deployment, $revision, $svcTemplate, array $svcTemplateInfo);
    public function modifyDeploymentSvcTemplate($deployment, $revision, $svcTemplate, array $svcTemplateInfo);
    public function deleteDeploymentSvcTemplate($deployment, $revision, $svcTemplate);
    public function getDeploymentSvcGroups($deployment, $revision);
    public function existsDeploymentSvcGroup($deployment, $revision, $svcGroup);
    public function getDeploymentSvcGroup($deployment, $revision, $svcGroup);
    public function createDeploymentSvcGroup($deployment, $revision, $svcGroup, array $svcGrpInfo);
    public function modifyDeploymentSvcGroup($deployment, $revision, $svcGroup, array $svcGrpInfo);
    public function deleteDeploymentSvcGroup($deployment, $revision, $svcGroup);
    public function getDeploymentSvcs($deployment, $revision);
    public function existsDeploymentSvc($deployment, $revision, $svc);
    public function getDeploymentSvc($deployment, $revision, $svc);
    public function createDeploymentSvc($deployment, $revision, $svc, array $svcInfo);
    public function modifyDeploymentSvc($deployment, $revision, $svc, array $svcInfo);
    public function deleteDeploymentSvc($deployment, $revision, $svc);
    public function getDeploymentSvcDependencies($deployment, $revision);
    public function existsDeploymentSvcDependency($deployment, $revision, $svcDep);
    public function getDeploymentSvcDependency($deployment, $revision, $svcDep);
    public function createDeploymentSvcDependency($deployment, $revision, $svcDep, array $svcDepInfo);
    public function modifyDeploymentSvcDependency($deployment, $revision, $svcDep, array $svcDepInfo);
    public function deleteDeploymentSvcDependency($deployment, $revision, $svcDep);
    public function getDeploymentSvcEscalations($deployment, $revision);
    public function existsDeploymentSvcEscalation($deployment, $revision, $svcEsc);
    public function getDeploymentSvcEscalation($deployment, $revision, $svcEsc);
    public function createDeploymentSvcEscalation($deployment, $revision, $svcEsc, array $svcEscInfo);
    public function modifyDeploymentSvcEscalation($deployment, $revision, $svcEsc, array $svcEscInfo);
    public function deleteDeploymentSvcEscalation($deployment, $revision, $svcEsc);
    public function getDeploymentNodeTemplates($deployment, $revision);
    public function existsDeploymentNodeTemplate($deployment, $revision, $nodeTemplate);
    public function getDeploymentNodeTemplate($deployment, $revision, $nodeTemplate);
    public function createDeploymentNodeTemplate($deployment, $revision, $nodeTemplate, array $nodeTemplateInfo);
    public function modifyDeploymentNodeTemplate($deployment, $revision, $nodeTemplate, array $nodeTemplateInfo);
    public function deleteDeploymentNodeTemplate($deployment, $revision, $nodeTemplate);
    public function getDeploymentNodeTemplateType($deployment, $revision, $nodeTemplate);
    public function addDeploymentUnclassifiedTemplate($deployment, $revision, $nodeTemplate);
    public function deleteDeploymentUnclassifiedTemplate($deployment, $revision);
    public function existsDeploymentUnclassifiedTemplate($deployment, $revision);
    public function addDeploymentStandardTemplate($deployment, $revision, $nodeTemplate);
    public function deleteDeploymentStandardTemplate($deployment, $revision, $nodeTemplate);
    public function existsDeploymentStandardTemplate($deployment, $revision, $nodeTemplate);
    public function getDeploymentStandardTemplates($deployment, $revision);
    public function existsDeploymentResourceCfg($deployment, $revision);
    public function getDeploymentResourceCfg($deployment, $revision);
    public function createDeploymentResourceCfg($deployment, $revision, array $resources);
    public function modifyDeploymentResourceCfg($deployment, $revision, array $resources);
    public function deleteDeploymentResourceCfg($deployment, $revision);
    public function existsDeploymentModgearmanCfg($deployment, $revision);
    public function getDeploymentModgearmanCfg($deployment, $revision);
    public function createDeploymentModgearmanCfg($deployment, $revision, array $cfgInfo);
    public function modifyDeploymentModgearmanCfg($deployment, $revision, array $cfgInfo);
    public function deleteDeploymentModgearmanCfg($deployment, $revision);
    public function existsDeploymentCgiCfg($deployment, $revision);
    public function getDeploymentCgiCfg($deployment, $revision);
    public function createDeploymentCgiCfg($deployment, $revision, $cfgInfo);
    public function modifyDeploymentCgiCfg($deployment, $revision, $cfgInfo);
    public function deleteDeploymentCgiCfg($deployment, $revision);
    public function existsDeploymentNagiosCfg($deployment, $revision);
    public function getDeploymentNagiosCfg($deployment, $revision);
    public function createDeploymentNagiosCfg($deployment, $revision, $nagiosInfo);
    public function modifyDeploymentNagiosCfg($deployment, $revision, $nagiosInfo);
    public function deleteDeploymentNagiosCfg($deployment, $revision);
    public function getDeploymentNRPECmds($deployment, $revision);
    public function existsDeploymentNRPECmd($deployment, $revision, $nrpeCmd);
    public function getDeploymentNRPECmd($deployment, $revision, $nrpeCmd);
    public function getDeploymentNRPECmdLine($deployment, $revision, $nrpeCmd);
    public function createDeploymentNRPECmd($deployment, $revision, $nrpeCmd, array $nrpeCmdInput);
    public function modifyDeploymentNRPECmd($deployment, $revision, $nrpeCmd, array $nrpeCmdInput);
    public function deleteDeploymentNRPECmd($deployment, $revision, $nrpeCmd);
    public function existsDeploymentNRPECfg($deployment, $revision);
    public function getDeploymentNRPECfg($deployment, $revision);
    public function createDeploymentNRPECfg($deployment, $revision, array $nrpeCfgInfo);
    public function modifyDeploymentNRPECfg($deployment, $revision, array $nrpeCfgInfo);
    public function deleteDeploymentNRPECfg($deployment, $revision);
    public function existsDeploymentSupNRPECfg($deployment, $revision);
    public function getDeploymentSupNRPECfg($deployment, $revision);
    public function createDeploymentSupNRPECfg($deployment, $revision, array $supNRPECfgInfo);
    public function modifyDeploymentSupNRPECfg($deployment, $revision, array $supNRPECfgInfo);
    public function deleteDeploymentSupNRPECfg($deployment, $revision);
    public function getDeploymentNRPEPlugins($deployment, $revision);
    public function existsDeploymentNRPEPlugin($deployment, $revision, $nrpePlugin);
    public function getDeploymentNRPEPlugin($deployment, $revision, $nrpePlugin);
    public function getDeploymentNRPEPluginFileContents($deployment, $revision, $nrpePlugin);
    public function createDeploymentNRPEPlugin($deployment, $revision, $nrpePlugin, array $nrpePluginInfo);
    public function modifyDeploymentNRPEPlugin($deployment, $revision, $nrpePlugin, array $nrpePluginInfo);
    public function deleteDeploymentNRPEPlugin($deployment, $revision, $nrpePlugin);
    public function getDeploymentSupNRPEPlugins($deployment, $revision);
    public function existsDeploymentSupNRPEPlugin($deployment, $revision, $supNRPEPlugin);
    public function getDeploymentSupNRPEPlugin($deployment, $revision, $supNRPEPlugin);
    public function getDeploymentSupNRPEPluginFileContents($deployment, $revision, $supNRPEPlugin);
    public function createDeploymentSupNRPEPlugin($deployment, $revision, $supNRPEPlugin, array $supNRPEPluginInfo);
    public function modifyDeploymentSupNRPEPlugin($deployment, $revision, $supNRPEPlugin, array $supNRPEPluginInfo);
    public function deleteDeploymentSupNRPEPlugin($deployment, $revision, $supNRPEPlugin);
    public function getDeploymentNagiosPlugins($deployment, $revision);
    public function existsDeploymentNagiosPlugin($deployment, $revision, $nagiosPlugin);
    public function getDeploymentNagiosPlugin($deployment, $revision, $nagiosPlugin);
    public function getDeploymentNagiosPluginFileContents($deployment, $revision, $nagiosPlugin);
    public function createDeploymentNagiosPlugin($deployment, $revision, $nagiosPlugin, array $nagiosPluginInfo);
    public function modifyDeploymentNagiosPlugin($deployment, $revision, $nagiosPlugin, array $nagiosPluginInfo);
    public function deleteDeploymentNagiosPlugin($deployment, $revision, $nagiosPlugin);
    public function getDeploymentClusterCmds($deployment, $revision);
    public function existsDeploymentClusterCmd($deployment, $revision, $clusterCmd);
    public function getDeploymentClusterCmd($deployment, $revision, $clusterCmd);
    public function getDeploymentClusterCmdLine($deployment, $revision, $clusterCmd);
    public function createDeploymentClusterCmd($deployment, $revision, $clusterCmd, array $clusterCmdInput);
    public function modifyDeploymentClusterCmd($deployment, $revision, $clusterCmd, array $clusterCmdInput);
    public function deleteDeploymentClusterCmd($deployment, $revision, $clusterCmd);
    public function existsConsumerDeploymentLock($deployment, $revision, $lockType);
    public function createConsumerDeploymentLock($deployment, $revision, $lockType, $ttl);
    public function deleteConsumerDeploymentLock($deployment, $revision, $lockType);
    public function setConsumerDeploymentInfo($deployment, $revision, $infoType, $info);
    public function getConsumerDeploymentInfo($deployment, $revision, $infoType);
    public function getCDCRouterZones();
    public function existsCDCRouterZone($zone);
    public function getCDCRouterZone($zone);
    public function writeCDCRouterZones(array $zoneData);

}

